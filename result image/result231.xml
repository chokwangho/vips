<VIPSPage PageRectHeight="600" PageRectLeft="0" PageRectTop="0" PageRectWidth="1200" PageTitle="Debugging Production with Event Logging - Zillow Engineering" Url="https://www.zillow.com/engineering/debugging-production-event-logging/" WindowHeight="600" WindowWidth="1200" neworder="0" order="0">
<LayoutNode BgColor="#ffffff" ContainImg="8" ContainP="14" ContainTable="false" DOMCldNum="0" DoC="1" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1" IsImg="false" LinkTextLen="239" ObjectRectHeight="4492" ObjectRectLeft="0" ObjectRectTop="0" ObjectRectWidth="1200" SourceIndex="0" TextLen="8355" order="1">
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="☰ Zillow Engineering Infrastructure Mobile Performance and Testing Web Culture &amp; Events Jobs " DOMCldNum="0" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-1" IsImg="false" LinkTextLen="84" ObjectRectHeight="242" ObjectRectLeft="0" ObjectRectTop="0" ObjectRectWidth="1200" SRC="&lt;button aria-expanded=&quot;false&quot; class=&quot;navbar-toggle collapsed&quot; data-target=&quot;#header-navbar&quot; data-toggle=&quot;collapse&quot; type=&quot;button&quot;&gt;&#13;☰&#13;&lt;/button&gt;&lt;a class=&quot;navbar-title&quot; href=&quot;https://www.zillow.com/engineering/&quot;&gt;&#13;Zillow Engineering &lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/infrastructure/&quot;&gt;Infrastructure&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/mobile/&quot;&gt;Mobile&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/performance/&quot;&gt;Performance and Testing&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/web/&quot;&gt;Web&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/culture-events/&quot;&gt;Culture &amp;amp; Events&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/careers/&quot;&gt;Jobs&lt;/a&gt;" SourceIndex="0" TextLen="85" order="2"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Debugging Production with Event Logging " DOMCldNum="15" DoC="10" FontSize="32" FontWeight="normal" FrameSourceIndex="0" ID="1-2" IsImg="false" LinkTextLen="0" ObjectRectHeight="50" ObjectRectLeft="0" ObjectRectTop="263" ObjectRectWidth="1200" SRC="&lt;h1 class=&quot;post-title&quot;&gt;&#13;Debugging Production with Event Logging &lt;/h1&gt;" SourceIndex="184" TextLen="39" order="3"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content=" Posted by  Zachary Wright on March 1, 2018 in  Infrastructure " DOMCldNum="0" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-3" IsImg="false" LinkTextLen="28" ObjectRectHeight="82" ObjectRectLeft="0" ObjectRectTop="334" ObjectRectWidth="1200" SRC=" Posted by &lt;a href=&quot;https://www.zillow.com/engineering/author/zachwr/&quot; rel=&quot;author&quot; title=&quot;Posts by Zachary Wright&quot;&gt;Zachary Wright&lt;/a&gt;on March 1, 2018in &lt;a href=&quot;https://www.zillow.com/engineering/category/infrastructure/&quot; rel=&quot;category tag&quot;&gt;Infrastructure&lt;/a&gt;" SourceIndex="0;191;0;0;212" TextLen="58" order="4"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="0" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-4" IsImg="true" LinkTextLen="0" ObjectRectHeight="350" ObjectRectLeft="0" ObjectRectTop="433" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;post-thumbnail wp-post-image&quot; height=&quot;350&quot; src=&quot;https://wp.zillowstatic.com/23/logs-501475.jpeg&quot; width=&quot;680&quot;/&gt;" SourceIndex="763" TextLen="0" order="5"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="The Bug " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-5" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="801" ObjectRectWidth="1200" SRC="&lt;h2&gt;The Bug&lt;/h2&gt;" SourceIndex="220" TextLen="7" order="6"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="A while back our team received a bug report that any developer of an application with search functionality dreads to see: the contents of our search results occasionally included items that didn'tmatch the given criteria. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-6" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="857" ObjectRectWidth="1200" SRC="&lt;p&gt;A while back our team received a bug report that any developer of an application with search functionality dreads to see: the contents of our search results occasionally included items that didn't match the given criteria.&lt;/p&gt;" SourceIndex="223" TextLen="221" order="7"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="As you can imagine, this bug quickly climbed the priority ladder. For a site built upon the foundation of searching for apartments, we need to be sure the results we return fit the query parametersgiven. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-7" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="926" ObjectRectWidth="1200" SRC="&lt;p&gt;As you can imagine, this bug quickly climbed the priority ladder. For a site built upon the foundation of searching for apartments, we need to be sure the results we return fit the query parameters given.&lt;/p&gt;" SourceIndex="226" TextLen="203" order="8"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="An initial round of debugging revealed the reason for the issue, but not the cause: the data in our  ElasticSearch  index did not always match the data in our SQL database. " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-8" IsImg="false" LinkTextLen="13" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="995" ObjectRectWidth="1200" SRC="An initial round of debugging revealed the reason for the issue, but not the cause: the data in our &lt;a href=&quot;https://www.elastic.co/&quot;&gt;ElasticSearch&lt;/a&gt; index did not always match the data in our SQL database." SourceIndex="0;231;0" TextLen="170" order="9"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="ElasticSearch is a search engine. You store data in it, just like a database, but it is schema-less and has incredibly powerful and performant search capabilities. Our infrastructure is set up so thatwhen a record, such as an apartment, is saved to our SQL database, it automatically stores the attributes that we want to be able to search on into a corresponding apartment index in ElasticSearch. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-9" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="1038" ObjectRectWidth="1200" SRC="&lt;p&gt;ElasticSearch is a search engine. You store data in it, just like a database, but it is schema-less and has incredibly powerful and performant search capabilities. Our infrastructure is set up so that when a record, such as an apartment, is saved to our SQL database, it automatically stores the attributes that we want to be able to search on into a corresponding apartment index in ElasticSearch.&lt;/p&gt;" SourceIndex="235" TextLen="397" order="10"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="This process is called &quot;indexing,&quot; and it happens every time a record is created or updated. When a renter searches for apartments with less than $2,000 rent, this search is ran with ElasticSearch,then the returned apartment id's are used to fetch the actual records from the SQL database, which are then returned to the user to view in their browser. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-10" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="1107" ObjectRectWidth="1200" SRC="&lt;p&gt;This process is called &quot;indexing,&quot; and it happens every time a record is created or updated. When a renter searches for apartments with less than $2,000 rent, this search is ran with ElasticSearch, then the returned apartment id's are used to fetch the actual records from the SQL database, which are then returned to the user to view in their browser.&lt;/p&gt;" SourceIndex="238" TextLen="351" order="11"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Somehow these two data sources were diverging. The rent for an apartment might be $1,000 in the index and $2,000 in the database. Our first instinct was that there was a race condition at play.We had very recently migrated our apartment data from MongoDB to SQL, and something about this infrastructure change wasn't behaving correctly. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-11" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="1176" ObjectRectWidth="1200" SRC="&lt;p&gt;Somehow these two data sources were diverging. The rent for an apartment might be $1,000 in the index and $2,000 in the database. Our first instinct was that there was a race condition at play. We had very recently migrated our apartment data from MongoDB to SQL, and something about this infrastructure change wasn't behaving correctly.&lt;/p&gt;" SourceIndex="241" TextLen="336" order="12"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Diagnosis " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-12" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="1246" ObjectRectWidth="1200" SRC="&lt;h2&gt;Diagnosis&lt;/h2&gt;" SourceIndex="244" TextLen="9" order="13"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Typically race conditions only manifest under very particular conditions, and those conditions tend to occur in production environments where multiple users and processes are doing thingssimultaneously. You can't just drop a breakpoint into your code and figure out where a race condition is. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-13" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="1302" ObjectRectWidth="1200" SRC="&lt;p&gt;Typically race conditions only manifest under very particular conditions, and those conditions tend to occur in production environments where multiple users and processes are doing things simultaneously. You can't just drop a breakpoint into your code and figure out where a race condition is.&lt;/p&gt;" SourceIndex="247" TextLen="292" order="14"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="In order to track this issue down we turned to a feature of  NewRelic  called  custom events.  Custom events allow you to log events within your code and then search for them using NewRelic's Insight's interface. " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-14" IsImg="false" LinkTextLen="22" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="1371" ObjectRectWidth="1200" SRC="In order to track this issue down we turned to a feature of &lt;a href=&quot;https://newrelic.com/&quot;&gt;NewRelic&lt;/a&gt; called &lt;a href=&quot;https://docs.newrelic.com/docs/insights/insights-data-sources/custom-data/insert-custom-events-insights-api&quot;&gt;custom events.&lt;/a&gt; Custom events allow you to log events within your code and then search for them using NewRelic'sInsight's interface." SourceIndex="0;252;0;255;0;0" TextLen="207" order="15"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="I opened up the code responsible for indexing records to ElasticSearch as they were saved, and injected this bit of Ruby: " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-15" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="1440" ObjectRectWidth="1200" SRC="&lt;p&gt;I opened up the code responsible for indexing records to ElasticSearch as they were saved, and injected this bit of Ruby:&lt;/p&gt;" SourceIndex="259" TextLen="121" order="16"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="if self.class == Apartment…::NewRelic::Agent.record_custom_event('ApartmentIndex',event_params)end " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-16" IsImg="false" LinkTextLen="0" ObjectRectHeight="196" ObjectRectLeft="0" ObjectRectTop="1483" ObjectRectWidth="1200" SRC="&lt;pre&gt;if self.class == Apartment&#13;…&#13;::NewRelic::Agent.record_custom_event(&#13;'ApartmentIndex',&#13;event_params&#13;)&#13;end&lt;/pre&gt;" SourceIndex="262" TextLen="98" order="17"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="For the sake readability I left out some setup code, namely the  event_params  variable. This variable is a hash that can contain whatever data you think you will need to debug your particular issue. Think of it as capturing the context of your code at the time that the event is hit. In our case we included the current apartment's ID, the response back from the ElasticSearch server, a snapshot of the apartment's attributes, and a current stack trace. For those curious, in Ruby, you can grab a current stack trace using  caller_locations(0) . " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-17" IsImg="false" LinkTextLen="0" ObjectRectHeight="82" ObjectRectLeft="0" ObjectRectTop="1696" ObjectRectWidth="1200" SRC="For the sake readability I left out some setup code, namely the &lt;code&gt;event_params&lt;/code&gt; variable. This variable is a hash that can contain whatever data you think you will need to debug your particular issue.Think of it as capturing the context of your code at the time that the event is hit. In our case we included the current apartment's ID, the response back from the ElasticSearch server, a snapshot ofthe apartment's attributes, and a current stack trace. For those curious, in Ruby, you can grab a current stack trace using &lt;code&gt;caller_locations(0)&lt;/code&gt;." SourceIndex="0;267;0;0;0;270;0" TextLen="540" order="18"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="With this code in place we could now begin registering  searchable  event data every time an apartment record was indexed to ElasticSearch. In addition, we also added a scheduled process that would run a few times a day and look for inconsistencies between apartment records in our SQL database and records in ElasticSearch. If it found one it would fix the issue and send an alert to our alerting service, triggering an email to the dev team and creating a snapshot of the apartment's data. " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-18" IsImg="false" LinkTextLen="0" ObjectRectHeight="78" ObjectRectLeft="0" ObjectRectTop="1795" ObjectRectWidth="1200" SRC="With this code in place we could now begin registering &lt;i&gt;searchable&lt;/i&gt; event data every time an apartment record was indexed to ElasticSearch. In addition, we also added a scheduled process thatwould run a few times a day and look for inconsistencies between apartment records in our SQL database and records in ElasticSearch. If it found one it would fix the issue and send an alert to ouralerting service, triggering an email to the dev team and creating a snapshot of the apartment's data." SourceIndex="0;276;0;0;0" TextLen="487" order="19"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="The relevant part of this &quot;fixer&quot; code is the alert notification: " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-19" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="1890" ObjectRectWidth="1200" SRC="&lt;p&gt;The relevant part of this &quot;fixer&quot; code is the alert notification:&lt;/p&gt;" SourceIndex="280" TextLen="65" order="20"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="AlertNotifier.perform(error_class: Apartment,error_message: 'Apartment ES index and db table out of sync.',context: { apartment: apartment.to_hash }) " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-20" IsImg="false" LinkTextLen="0" ObjectRectHeight="140" ObjectRectLeft="0" ObjectRectTop="1933" ObjectRectWidth="1200" SRC="&lt;pre&gt;AlertNotifier.perform(&#13;error_class: Apartment,&#13;error_message: 'Apartment ES index and db table out of sync.',&#13;context: { apartment: apartment.to_hash }&#13;)&lt;/pre&gt;" SourceIndex="283" TextLen="149" order="21"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Fortunately Rails makes it very easy to convert any  ActiveRecord  object to a hash using the  to_hash  method, making it simple to pass that data snapshot over to our alerting service. " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-21" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="2090" ObjectRectWidth="1200" SRC="Fortunately Rails makes it very easy to convert any &lt;code&gt;ActiveRecord&lt;/code&gt; object to a hash using the &lt;code&gt;to_hash&lt;/code&gt; method, making it simple to pass that data snapshot over to our alerting service." SourceIndex="0;288;0;291;0" TextLen="181" order="22"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="With these two pieces of code in place, we now had the ability to triangulate and diagnose synchronization errors: when one occurred the dev team would receive an email and a snapshot of theapartment's data. We could then take the offending apartment's ID and run a query in NewRelic Insights to obtain a history of that apartment's indexing attempts, along with a snapshot of its data foreach attempt: " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-22" IsImg="false" LinkTextLen="0" ObjectRectHeight="78" ObjectRectLeft="0" ObjectRectTop="2135" ObjectRectWidth="1200" SRC="&lt;p&gt;With these two pieces of code in place, we now had the ability to triangulate and diagnose synchronization errors: when one occurred the dev team would receive an email and a snapshot of the apartment's data. We could then take the offending apartment's ID and run a query in NewRelic Insights to obtain a history of that apartment's indexing attempts, along with a snapshot of its data for each attempt:&lt;/p&gt;" SourceIndex="295" TextLen="402" order="23"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="SELECT * from ApartmentIndex where id=1021570 since 1 day ago " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-23" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="2230" ObjectRectWidth="1200" SRC="&lt;code&gt;SELECT * from ApartmentIndex where id=1021570 since 1 day ago&lt;/code&gt;" SourceIndex="299" TextLen="61" order="24"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="The Answer " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-24" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="2276" ObjectRectWidth="1200" SRC="&lt;h2&gt;The Answer&lt;/h2&gt;" SourceIndex="302" TextLen="10" order="25"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Upon investigating this log for the next alert we received, it became obvious that multiple indexes for the same apartment would sometimes cluster together. The stack traces we recorded in the NewRelic events allowed us to pinpoint down to the line number exactly where in the code these indexes were happening. In addition, by recording the ElasticSearch server's response in the  event_params , we saw that sometimes the  version  of the index, a counter that ElasticSearch increments each time an index is updated, would sometimes skip a number. This meant there were indexes happening outside the central place we had injected our logging. " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-25" IsImg="false" LinkTextLen="0" ObjectRectHeight="106" ObjectRectLeft="0" ObjectRectTop="2332" ObjectRectWidth="1200" SRC="Upon investigating this log for the next alert we received, it became obvious that multiple indexes for the same apartment would sometimes cluster together. The stack traces we recorded in theNewRelic events allowed us to pinpoint down to the line number exactly where in the code these indexes were happening. In addition, by recording the ElasticSearch server's response in the &lt;code&gt;event_params&lt;/code&gt;, we saw that sometimes the &lt;code&gt;version&lt;/code&gt; of the index, a counter that ElasticSearch increments each time an index is updated, would sometimes skip a number. This meant there wereindexes happening outside the central place we had injected our logging." SourceIndex="0;0;307;0;310;0;0" TextLen="637" order="26"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="We ended up discovering three issues feeding the race condition: " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-26" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="2455" ObjectRectWidth="1200" SRC="&lt;p&gt;We ended up discovering three issues feeding the race condition:&lt;/p&gt;" SourceIndex="314" TextLen="64" order="27"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Jobs queued after an apartment was saved would sometimes need to reindex the apartment, but they were reading from a slave database, meaning they would sometimes read outdated datathat had not yet been replicated from the master database to the slave. Some of these asynchronous jobs were queued from  after_save  callbacks. In Rails these callbacks run  before  the database transaction has finished, meaning that if the job gets picked up and executed by a worker quick enough, it would read outdated data. There was a &quot;reindex on failure&quot; job that attempted to reindex records if a connection error to the ElasticSearch server failed. These were rare, but happened a few times a day, and were the source of our &quot;skipped versions&quot;. They indexed directly to ElasticSearch instead of going through our library. This was done to prevent an infinite loop of job creation in case the connection issues persisted for an extended period. This job was also queued from an  after_save  callback, meaning its reindex attempt could also read outdated data. " DOMCldNum="7" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-27" IsImg="false" LinkTextLen="0" ObjectRectHeight="186" ObjectRectLeft="0" ObjectRectTop="2498" ObjectRectWidth="1200" SRC="&lt;li&gt;Jobs queued after an apartment was saved would sometimes need to reindex the apartment, but they were reading from a slave database, meaning they would sometimes read outdated data that had not yet been replicated from the master database to the slave.&lt;/li&gt;Some of these asynchronous jobs were queued from &lt;code&gt;after_save&lt;/code&gt; callbacks. In Rails these callbacks run &lt;i&gt;before &lt;/i&gt;the database transaction has finished, meaning that if the job gets picked upand executed by a worker quick enough, it would read outdated data.There was a &quot;reindex on failure&quot; job that attempted to reindex records if a connection error to the ElasticSearch server failed. These were rare, but happened a few times a day, and were thesource of our &quot;skipped versions&quot;. They indexed directly to ElasticSearch instead of going through our library. This was done to prevent an infinite loop of job creation in case the connectionissues persisted for an extended period. This job was also queued from an &lt;code&gt;after_save&lt;/code&gt; callback, meaning its reindex attempt could also read outdated data." SourceIndex="319;0;324;0;327;0;0;0;0;0;333;0" TextLen="1036" order="28"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Once we had identified the issues and created user stories for them, implementing the fixes was fairly straightforward. We ensured that the jobs read from the master database, and we moved our job queuing from  after_save  callbacks to  after_commit  callbacks, which don't run until the database transaction has finished. " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-28" IsImg="false" LinkTextLen="0" ObjectRectHeight="54" ObjectRectLeft="0" ObjectRectTop="2701" ObjectRectWidth="1200" SRC="Once we had identified the issues and created user stories for them, implementing the fixes was fairly straightforward. We ensured that the jobs read from the master database, and we moved ourjob queuing from &lt;code&gt;after_save&lt;/code&gt; callbacks to &lt;code&gt;after_commit&lt;/code&gt; callbacks, which don't run until the database transaction has finished." SourceIndex="0;0;340;0;343;0" TextLen="317" order="29"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Our alerting service paints a beautiful picture of these errors as the fixes were implemented: " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-29" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="2772" ObjectRectWidth="1200" SRC="&lt;p&gt;Our alerting service paints a beautiful picture of these errors as the fixes were implemented:&lt;/p&gt;" SourceIndex="347" TextLen="94" order="30"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-30" IsImg="true" LinkTextLen="0" ObjectRectHeight="107" ObjectRectLeft="0" ObjectRectTop="2815" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-2194&quot; height=&quot;107&quot; src=&quot;https://wp.zillowstatic.com/23/Screenshot-2018-02-16-15.27.35-f1ee8e-300x107.png&quot; width=&quot;300&quot;/&gt;" SourceIndex="898" TextLen="0" order="31"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Conclusion " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-31" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="2940" ObjectRectWidth="1200" SRC="&lt;h2&gt;Conclusion&lt;/h2&gt;" SourceIndex="353" TextLen="10" order="32"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="While these problems and solutions are interesting and perhaps helpful to other Ruby on Rails developers, I believe the true lesson learned is applicable to developers on any platform: lean into yourlogging services to diagnose difficult production problems, like race conditions. The debugger isn't always going to be helpful, and ssh-ing into a production console to manually tinker is risky, timeconsuming, and as a best practice probably shouldn't even be an option available to you. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-32" IsImg="false" LinkTextLen="0" ObjectRectHeight="78" ObjectRectLeft="0" ObjectRectTop="2996" ObjectRectWidth="1200" SRC="&lt;p&gt;While these problems and solutions are interesting and perhaps helpful to other Ruby on Rails developers, I believe the true lesson learned is applicable to developers on any platform: lean into your logging services to diagnose difficult production problems, like race conditions. The debugger isn't always going to be helpful, and ssh-ing into a production console to manually tinker is risky, time consuming, and as a best practice probably shouldn't even be an option available to you.&lt;/p&gt;" SourceIndex="356" TextLen="487" order="33"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="If we had not used NewRelic and our alert service to track down these errors, we might still be investigating their cause. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-33" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3091" ObjectRectWidth="1200" SRC="&lt;p&gt;If we had not used NewRelic and our alert service to track down these errors, we might still be investigating their cause.&lt;/p&gt;" SourceIndex="359" TextLen="122" order="34"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="When most of us were just getting started as developers we tended to debug our programs by littering them with print lines. Eventually we graduated to using a real debugger. In some ways these logging solutions can feel like a step back to those primal print lines - but it's not. Log streams are  one of the twelve factors  of a twelve factor app. They tell the history of your application. They tell a story of what it was thinking at any given moment, and best of all they are  searchable . " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-34" IsImg="false" LinkTextLen="25" ObjectRectHeight="78" ObjectRectLeft="0" ObjectRectTop="3134" ObjectRectWidth="1200" SRC="When most of us were just getting started as developers we tended to debug our programs by littering them with print lines. Eventually we graduated to using a real debugger. In some ways theselogging solutions can feel like a step back to those primal print lines - but it's not. Log streams are &lt;a href=&quot;https://12factor.net/logs&quot;&gt;one of the twelve factors&lt;/a&gt; of a twelve factor app. They tell the history of your application. They tell astory of what it was thinking at any given moment, and best of all they are &lt;i&gt;searchable&lt;/i&gt;." SourceIndex="0;0;364;0;0;367;0" TextLen="487" order="35"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="There's no need to guess at what's happening in production when the tools you have available essentially turn it into a glass box. Whether it's NewRelic custom events,  Graylog2 ,  Splunk ,  ELK , or one of the myriad other logging solutions, just be sure that your application's story is being written somewhere. More importantly, be sure that you're reading it. " DOMCldNum="7" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-35" IsImg="false" LinkTextLen="17" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="3229" ObjectRectWidth="1200" SRC="There's no need to guess at what's happening in production when the tools you have available essentially turn it into a glass box. Whether it's NewRelic custom events, &lt;a href=&quot;https://www.graylog.org/&quot;&gt;Graylog2&lt;/a&gt;, &lt;a href=&quot;https://www.splunk.com/en_us/solutions/solution-areas/log-management.html&quot;&gt;Splunk&lt;/a&gt;, &lt;a href=&quot;https://www.elastic.co/webinars/introduction-elk-stack&quot;&gt;ELK&lt;/a&gt;, orone of the myriad other logging solutions, just be sure that your application's story is being written somewhere. More importantly, be sure that you're reading it." SourceIndex="0;373;0;376;0;379;0;0" TextLen="356" order="36"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Share Facebook Twitter LinkedIn " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-36" IsImg="false" LinkTextLen="0" ObjectRectHeight="104" ObjectRectLeft="0" ObjectRectTop="3298" ObjectRectWidth="1200" SRC="&lt;strong&gt;Share&lt;/strong&gt;&lt;span class=&quot;hidden-xs&quot;&gt;Facebook&lt;/span&gt;&lt;span class=&quot;hidden-xs&quot;&gt;Twitter&lt;/span&gt;&lt;span class=&quot;hidden-xs&quot;&gt;LinkedIn&lt;/span&gt;" SourceIndex="387;397;409;421" TextLen="28" order="37"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-37" IsImg="false" LinkTextLen="0" ObjectRectHeight="369" ObjectRectLeft="0" ObjectRectTop="3436" ObjectRectWidth="1200" SourceIndex="437" TextLen="61" order="38">
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" Prev " DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-37-1" IsImg="false" LinkTextLen="0" ObjectRectHeight="326" ObjectRectLeft="0" ObjectRectTop="3436" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;media-object wp-post-image&quot; height=&quot;300&quot; src=&quot;https://wp.zillowstatic.com/23/iStock-172157592-bd4a03-300x300.jpg&quot; width=&quot;300&quot;/&gt;&lt;h4 class=&quot;media-heading&quot;&gt;Prev&lt;/h4&gt;" SourceIndex="986;444" TextLen="4" order="39"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="The Benefits of Dependency Injection in Dynamic Languages " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-37-2" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3779" ObjectRectWidth="1200" SRC="The Benefits of Dependency Injection in Dynamic Languages" SourceIndex="0" TextLen="57" order="40"/>
</LayoutNode>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-38" IsImg="false" LinkTextLen="0" ObjectRectHeight="369" ObjectRectLeft="0" ObjectRectTop="3822" ObjectRectWidth="1200" SourceIndex="457" TextLen="31" order="41">
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Next " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-38-1" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3822" ObjectRectWidth="1200" SRC="&lt;h4 class=&quot;media-heading&quot;&gt;Next&lt;/h4&gt;" SourceIndex="459" TextLen="4" order="42"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content="Debugging Capybara Failures  " DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-38-2" IsImg="false" LinkTextLen="0" ObjectRectHeight="326" ObjectRectLeft="0" ObjectRectTop="3865" ObjectRectWidth="1200" SRC="Debugging Capybara Failures&lt;img alt=&quot;&quot; class=&quot;media-object wp-post-image&quot; height=&quot;300&quot; src=&quot;https://wp.zillowstatic.com/23/capybara-43be2d-300x300.jpg&quot; width=&quot;300&quot;/&gt;" SourceIndex="0;1012" TextLen="27" order="43"/>
</LayoutNode>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Want to work at Zillow? View Openings Zillow.com Jobs Yahoo - Zillow Real Estate Network © 2006 - 2018 Zillow Follow Us Facebook Twitter LinkedIn " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-39" IsImg="false" LinkTextLen="50" ObjectRectHeight="284" ObjectRectLeft="0" ObjectRectTop="4208" ObjectRectWidth="1200" SRC="&lt;p&gt;Want to work at Zillow?&lt;/p&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;https://www.zillow.com/careers/jobs/&quot;&gt;View Openings&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/&quot;&gt;Zillow.com&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/careers/&quot;&gt;Jobs&lt;/a&gt;&lt;li&gt;Yahoo - Zillow Real Estate Network&lt;/li&gt;&lt;li&gt;© 2006 - 2018 Zillow&lt;/li&gt;&lt;li&gt;Follow Us&lt;/li&gt;&lt;a href=&quot;https://www.facebook.com/Zillow&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;&lt;a href=&quot;https://twitter.com/zillow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;a href=&quot;https://www.linkedin.com/company/zillow&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;" SourceIndex="484" TextLen="136" order="44"/>
</LayoutNode>
</VIPSPage>
