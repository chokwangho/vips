<VIPSPage PageRectHeight="600" PageRectLeft="0" PageRectTop="0" PageRectWidth="1200" PageTitle="The Benefits of Dependency Injection in Dynamic Languages - Zillow Engineering" Url="https://www.zillow.com/engineering/dependency-injection/" WindowHeight="600" WindowWidth="1200" neworder="0" order="0">
<LayoutNode BgColor="#ffffff" ContainImg="24" ContainP="2" ContainTable="false" DOMCldNum="0" DoC="1" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1" IsImg="false" LinkTextLen="163" ObjectRectHeight="6276" ObjectRectLeft="0" ObjectRectTop="0" ObjectRectWidth="1200" SourceIndex="0" TextLen="4800" order="1">
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="☰ Zillow Engineering Infrastructure Mobile Performance and Testing Web Culture &amp; Events Jobs " DOMCldNum="0" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-1" IsImg="false" LinkTextLen="84" ObjectRectHeight="242" ObjectRectLeft="0" ObjectRectTop="0" ObjectRectWidth="1200" SRC="&lt;button aria-expanded=&quot;false&quot; class=&quot;navbar-toggle collapsed&quot; data-target=&quot;#header-navbar&quot; data-toggle=&quot;collapse&quot; type=&quot;button&quot;&gt;&#13;☰&#13;&lt;/button&gt;&lt;a class=&quot;navbar-title&quot; href=&quot;https://www.zillow.com/engineering/&quot;&gt;&#13;Zillow Engineering &lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/infrastructure/&quot;&gt;Infrastructure&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/mobile/&quot;&gt;Mobile&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/performance/&quot;&gt;Performance and Testing&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/web/&quot;&gt;Web&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/culture-events/&quot;&gt;Culture &amp;amp; Events&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/careers/&quot;&gt;Jobs&lt;/a&gt;" SourceIndex="0" TextLen="85" order="2"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="The Benefits of Dependency Injection in Dynamic Languages " DOMCldNum="17" DoC="10" FontSize="32" FontWeight="normal" FrameSourceIndex="0" ID="1-2" IsImg="false" LinkTextLen="0" ObjectRectHeight="50" ObjectRectLeft="0" ObjectRectTop="263" ObjectRectWidth="1200" SRC="&lt;h1 class=&quot;post-title&quot;&gt;&#13;The Benefits of Dependency Injection in Dynamic Languages &lt;/h1&gt;" SourceIndex="190" TextLen="57" order="3"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content=" Posted by  tbrown on January 12, 2018 in  Web " DOMCldNum="0" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-3" IsImg="false" LinkTextLen="9" ObjectRectHeight="82" ObjectRectLeft="0" ObjectRectTop="334" ObjectRectWidth="1200" SRC=" Posted by &lt;a href=&quot;https://www.zillow.com/engineering/author/tbrown/&quot; rel=&quot;author&quot; title=&quot;Posts by tbrown&quot;&gt;tbrown&lt;/a&gt;on January 12, 2018in &lt;a href=&quot;https://www.zillow.com/engineering/category/web/&quot; rel=&quot;category tag&quot;&gt;Web&lt;/a&gt;" SourceIndex="0;197;0;0;204" TextLen="42" order="4"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="0" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-4" IsImg="true" LinkTextLen="0" ObjectRectHeight="450" ObjectRectLeft="0" ObjectRectTop="433" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;post-thumbnail wp-post-image&quot; height=&quot;450&quot; src=&quot;https://wp.zillowstatic.com/23/iStock-172157592-bd4a03-900x450.jpg&quot; width=&quot;900&quot;/&gt;" SourceIndex="768" TextLen="0" order="5"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Introduction " DOMCldNum="17" DoC="10" FontSize="32" FontWeight="normal" FrameSourceIndex="0" ID="1-5" IsImg="false" LinkTextLen="0" ObjectRectHeight="50" ObjectRectLeft="0" ObjectRectTop="904" ObjectRectWidth="1200" SRC="&lt;h1&gt;Introduction&lt;/h1&gt;" SourceIndex="212" TextLen="12" order="6"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="This post will focus on a specific way of implementing one of the  SOLID  principles, Dependency Inversion. First, we should define Dependency Inversion. There are two major parts: " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-6" IsImg="false" LinkTextLen="5" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="975" ObjectRectWidth="1200" SRC="This post will focus on a specific way of implementing one of the &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt; principles, Dependency Inversion. First, we should define Dependency Inversion. There are two major parts:" SourceIndex="0;218;0" TextLen="178" order="7"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="High-level code should not depend on lower level code, both should depend upon abstractions. Abstractions should not depend on details, instead, details should depend on abstractions " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-7" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="1018" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;High-level code should not depend on lower level code, both should depend upon abstractions.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Abstractions should not depend on details, instead, details should depend on abstractions&lt;/span&gt;" SourceIndex="225;229" TextLen="181" order="8"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="A lot of people might be familiar on how to implement this in a statically-typed environment. You define an interface, and require that interface as an argument (inject it) to the class/method where you have a dependency you’re attempting to invert. Take the following code as an example: " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-8" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="1087" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;A lot of people might be familiar on how to implement this in a statically-typed environment. You define an interface, and require that interface as an argument (inject it) to the class/method where you have a dependency you’re attempting to invert. Take the following code as an example:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A lot of people might be familiar on how to implement this in a statically-typed environment. You define an interface, and require that interface as an argument (inject it) to the class/method where you have a dependency you’re attempting to invert. Take the following code as an example:&lt;/span&gt;" SourceIndex="234;234" TextLen="287" order="9"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Hard Dependency in UserSaver Interactor (Java): " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-9" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="1156" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;Hard Dependency in UserSaver Interactor (Java):&lt;/span&gt;" SourceIndex="238" TextLen="47" order="10"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-10" IsImg="true" LinkTextLen="0" ObjectRectHeight="352" ObjectRectLeft="0" ObjectRectTop="1199" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;wp-image-2164 alignnone&quot; height=&quot;352&quot; src=&quot;https://wp.zillowstatic.com/23/user_saver_concrete-5bcc31.png&quot; width=&quot;597&quot;/&gt;" SourceIndex="802" TextLen="0" order="11"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Inverted Depen dency in UserSaver Interactor: " DOMCldNum="2" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-11" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="1568" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;Inverted Depen&lt;/span&gt;dency in UserSaver Interactor:" SourceIndex="245;0" TextLen="44" order="12"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-12" IsImg="true" LinkTextLen="0" ObjectRectHeight="432" ObjectRectLeft="0" ObjectRectTop="1611" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-2163&quot; height=&quot;432&quot; src=&quot;https://wp.zillowstatic.com/23/user_saver_abstraction-72f0af.png&quot; width=&quot;601&quot;/&gt;" SourceIndex="810" TextLen="0" order="13"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Here are some benefits of this approach: " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-13" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="2060" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;Here are some benefits of this approach:&lt;/span&gt;" SourceIndex="253" TextLen="40" order="14"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Our code depends on an abstraction (easier to change implementation details without messing around with unrelated code). Our code can be injected with mocked dependencies in unit tests (we’ll still test that the layers communicate properly in our integration tests). This will allow for a major speed increase in our tests (no network or DB calls!) " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-14" IsImg="false" LinkTextLen="0" ObjectRectHeight="78" ObjectRectLeft="0" ObjectRectTop="2103" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;Our code depends on an abstraction (easier to change implementation details without messing around with unrelated code).&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our code can be injected with mocked dependencies in unit tests (we’ll still test that the layers communicate properly in our integration tests). This will allow for a major speed increase in our tests (no network or DB calls!)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our code can be injected with mocked dependencies in unit tests (we’ll still test that the layers communicate properly in our integration tests). This will allow for a major speed increase in our tests (no network or DB calls!)&lt;/span&gt;" SourceIndex="259;263;263" TextLen="346" order="15"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Dynamic Languages " DOMCldNum="17" DoC="10" FontSize="32" FontWeight="normal" FrameSourceIndex="0" ID="1-15" IsImg="false" LinkTextLen="0" ObjectRectHeight="50" ObjectRectLeft="0" ObjectRectTop="2202" ObjectRectWidth="1200" SRC="&lt;h1&gt;Dynamic Languages&lt;/h1&gt;" SourceIndex="267" TextLen="17" order="16"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="“Great”, you might say, “but I code in a dynamically typed language, I have no explicit interfaces. How am I supposed to do this?!”. The answer:  duck typing . " DOMCldNum="0" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-16" IsImg="false" LinkTextLen="11" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="2273" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;“Great”, you might say, “but I code in a dynamically typed language, I have no explicit interfaces. How am I supposed to do this?!”.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The answer: &lt;/span&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Duck_typing&quot;&gt;duck typing&lt;/a&gt;." SourceIndex="271;279;282;0" TextLen="156" order="17"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="When a method/class in a statically typed language requires an object, it defines its type at compile time. This allows us to invert our dependencies at compile time; we can require abstractions instead of implementations to our methods (via type annotations pointing to interfaces instead of concrete classes). " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-17" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="2342" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;When a method/class in a statically typed language requires an object, it defines its type at compile time. This allows us to invert our dependencies at compile time; we can require abstractions instead of implementations to our methods (via type annotations pointing to interfaces instead of concrete classes).&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When a method/class in a statically typed language requires an object, it defines its type at compile time. This allows us to invert our dependencies at compile time; we can require abstractions instead of implementations to our methods (via type annotations pointing to interfaces instead of concrete classes).&lt;/span&gt;" SourceIndex="287;287" TextLen="310" order="18"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="In a language like Ruby, though, this happens automagically! When we define a new dependency to be injected into a class, that dependency is an abstraction, it has no concrete type until runtime, and it can be any type as long as it responds to the methods that are called on it in that scope (an implicitly defined interface). " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-18" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="2411" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;In a language like Ruby, though, this happens automagically! When we define a new dependency to be injected into a class, that dependency is an abstraction, it has no concrete type until runtime, and it can be any type as long as it responds to the methods that are called on it in that scope (an implicitly defined interface).&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In a language like Ruby, though, this happens automagically! When we define a new dependency to be injected into a class, that dependency is an abstraction, it has no concrete type until runtime, and it can be any type as long as it responds to the methods that are called on it in that scope (an implicitly defined interface).&lt;/span&gt;" SourceIndex="291;291" TextLen="326" order="19"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="This means that when you define a new method argument, that really is like defining an interface that requires all the methods/properties that are called on it in that scope. " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-19" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="2480" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;This means that when you define a new method argument, that really is like defining an interface that requires all the methods/properties that are called on it in that scope.&lt;/span&gt;" SourceIndex="295" TextLen="174" order="20"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="As an example, take a look at what looks to be a pretty standard Ruby method: " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-20" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="2523" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;As an example, take a look at what looks to be a pretty standard Ruby method:&lt;/span&gt;" SourceIndex="299" TextLen="77" order="21"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-21" IsImg="true" LinkTextLen="0" ObjectRectHeight="124" ObjectRectLeft="0" ObjectRectTop="2566" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-2162&quot; height=&quot;124&quot; src=&quot;https://wp.zillowstatic.com/23/print_name_user-e0e98c.png&quot; width=&quot;285&quot;/&gt;" SourceIndex="863" TextLen="0" order="22"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="This method can be rewritten in a more generic/reusable way: " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-22" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="2707" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;This method can be rewritten in a more generic/reusable way:&lt;/span&gt;" SourceIndex="306" TextLen="60" order="23"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-23" IsImg="true" LinkTextLen="0" ObjectRectHeight="134" ObjectRectLeft="0" ObjectRectTop="2750" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-2161&quot; height=&quot;134&quot; src=&quot;https://wp.zillowstatic.com/23/print_name_obj-d604a0.png&quot; width=&quot;417&quot;/&gt;" SourceIndex="870" TextLen="0" order="24"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="And an equivalent Java interface would be defined and used as such: " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-24" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="2901" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;And an equivalent Java interface would be defined and used as such:&lt;/span&gt;" SourceIndex="313" TextLen="67" order="25"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-25" IsImg="true" LinkTextLen="0" ObjectRectHeight="307" ObjectRectLeft="0" ObjectRectTop="2944" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-2158&quot; height=&quot;307&quot; src=&quot;https://wp.zillowstatic.com/23/java_print_name-038584.png&quot; width=&quot;569&quot;/&gt;" SourceIndex="877" TextLen="0" order="26"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="The point here is that while interfaces don’t exist in dynamically typed languages, we get very similar functionality via non-type annotated method arguments. " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-26" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3268" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;The point here is that while interfaces don’t exist in dynamically typed languages, we get very similar functionality via non-type annotated method arguments.&lt;/span&gt;" SourceIndex="320" TextLen="158" order="27"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="This all means that by injecting our dependencies into our code, instead of calling concrete implementations directly, our code goes from depending on an implementation, to depending on an abstraction. In other words, by utilizing Dependency Injection, we achieve Dependency Inversion for free! " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-27" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="3311" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;This all means that by injecting our dependencies into our code, instead of calling concrete implementations directly, our code goes from depending on an implementation, to depending on an abstraction. In other words, by utilizing Dependency Injection, we achieve Dependency Inversion for free!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This all means that by injecting our dependencies into our code, instead of calling concrete implementations directly, our code goes from depending on an implementation, to depending on an abstraction. In other words, by utilizing Dependency Injection, we achieve Dependency Inversion for free!&lt;/span&gt;" SourceIndex="324;324" TextLen="293" order="28"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Rails Example " DOMCldNum="17" DoC="10" FontSize="32" FontWeight="normal" FrameSourceIndex="0" ID="1-28" IsImg="false" LinkTextLen="0" ObjectRectHeight="50" ObjectRectLeft="0" ObjectRectTop="3384" ObjectRectWidth="1200" SRC="&lt;h1&gt;Rails Example&lt;/h1&gt;" SourceIndex="327" TextLen="13" order="29"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Here’s a super simple Rails example of Dependency Injection and its benefit. " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-29" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3455" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;Here’s a super simple Rails example of Dependency Injection and its benefit.&lt;/span&gt;" SourceIndex="331" TextLen="76" order="30"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="A normal AR object: " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-30" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3498" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;A normal AR object:&lt;/span&gt;" SourceIndex="335" TextLen="19" order="31"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-31" IsImg="true" LinkTextLen="0" ObjectRectHeight="111" ObjectRectLeft="0" ObjectRectTop="3541" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-2160&quot; height=&quot;111&quot; src=&quot;https://wp.zillowstatic.com/23/normal_AR-dbd97d.png&quot; width=&quot;426&quot;/&gt;" SourceIndex="899" TextLen="0" order="32"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="and an Interactor to fetch an AR object from the DB: " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-32" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3669" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;and an Interactor to fetch an AR object from the DB:&lt;/span&gt;" SourceIndex="342" TextLen="52" order="33"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-33" IsImg="true" LinkTextLen="0" ObjectRectHeight="160" ObjectRectLeft="0" ObjectRectTop="3712" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-2155&quot; height=&quot;160&quot; src=&quot;https://wp.zillowstatic.com/23/interactor_fetching_ar-7b4c05.png&quot; width=&quot;326&quot;/&gt;" SourceIndex="906" TextLen="0" order="34"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Here’s this cleaned up with some Dependency Injection: " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-34" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3889" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;Here’s this cleaned up with some Dependency Injection:&lt;/span&gt;" SourceIndex="349" TextLen="54" order="35"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-35" IsImg="true" LinkTextLen="0" ObjectRectHeight="182" ObjectRectLeft="0" ObjectRectTop="3932" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-2157&quot; height=&quot;182&quot; src=&quot;https://wp.zillowstatic.com/23/interactor_with_di-d40751.png&quot; width=&quot;436&quot;/&gt;" SourceIndex="913" TextLen="0" order="36"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Here’s us injecting a mocked User in a unit test: " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-36" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="4131" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;Here’s us injecting a mocked User in a unit test:&lt;/span&gt;" SourceIndex="356" TextLen="49" order="37"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="1" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-37" IsImg="true" LinkTextLen="0" ObjectRectHeight="428" ObjectRectLeft="0" ObjectRectTop="4174" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-2159&quot; height=&quot;428&quot; src=&quot;https://wp.zillowstatic.com/23/mocked_user-1e010e.png&quot; width=&quot;609&quot;/&gt;" SourceIndex="920" TextLen="0" order="38"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="You need to mock out all methods that are used in the UserFetcher on the passed in user_datastore_class (practically just adhere to the interface). " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-38" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="4619" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;You need to mock out all methods that are used in the UserFetcher on the passed in user_datastore_class (practically just adhere to the interface).&lt;/span&gt;" SourceIndex="363" TextLen="147" order="39"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="There’s the magic! Your unit tests are now truly just testing the logic in that class, and as an added benefit, your tests will run a lot quicker (not hitting the DB anymore)! " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-39" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="4662" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;There’s the magic! Your unit tests are now truly just testing the logic in that class, and as an added benefit, your tests will run a lot quicker (not hitting the DB anymore)!&lt;/span&gt;" SourceIndex="367" TextLen="175" order="40"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Conclusion " DOMCldNum="17" DoC="10" FontSize="32" FontWeight="normal" FrameSourceIndex="0" ID="1-40" IsImg="false" LinkTextLen="0" ObjectRectHeight="50" ObjectRectLeft="0" ObjectRectTop="4709" ObjectRectWidth="1200" SRC="&lt;h1&gt;Conclusion&lt;/h1&gt;" SourceIndex="370" TextLen="10" order="41"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="A quick note, in Ruby, and most dynamic languages, you can set a default to these arguments. You still get the benefit of quicker tests and decoupling, while also getting the benefit of not having to manually pass in the arguments to every method call. " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-41" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="4780" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;A quick note, in Ruby, and most dynamic languages, you can set a default to these arguments. You still get the benefit of quicker tests and decoupling, while also getting the benefit of not having to manually pass in the arguments to every method call.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A quick note, in Ruby, and most dynamic languages, you can set a default to these arguments. You still get the benefit of quicker tests and decoupling, while also getting the benefit of not having to manually pass in the arguments to every method call.&lt;/span&gt;" SourceIndex="374;374" TextLen="251" order="42"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="A major downside to utilizing default arguments though, is it does break the Dependency Inversion Principle, “Abstractions should not depend on details, instead, details should depend on abstractions”. Setting a default state for an abstraction is causing said abstraction to depend on a detail, so I would stay away from default arguments for injected dependencies. " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-42" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="4849" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;A major downside to utilizing default arguments though, is it does break the Dependency Inversion Principle, “Abstractions should not depend on details, instead, details should depend on abstractions”. Setting a default state for an abstraction is causing said abstraction to depend on a detail, so I would stay away from default arguments for injected dependencies.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A major downside to utilizing default arguments though, is it does break the Dependency Inversion Principle, “Abstractions should not depend on details, instead, details should depend on abstractions”. Setting a default state for an abstraction is causing said abstraction to depend on a detail, so I would stay away from default arguments for injected dependencies.&lt;/span&gt;" SourceIndex="378;378" TextLen="365" order="43"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="In conclusion, Dependency Inversion is just as important to adhere to in a dynamically typed environment, and is very easy to achieve by utilizing Dependency Injection. It requires less code than in a statically typed environment, as is normally the case in a dynamically typed environment, but can lead to the same benefits in testing and code reusability. " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-43" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="4918" ObjectRectWidth="1200" SRC="&lt;span style=&quot;font-weight: 400;&quot;&gt;In conclusion, Dependency Inversion is just as important to adhere to in a dynamically typed environment, and is very easy to achieve by utilizing Dependency Injection. It requires less code than in a statically typed environment, as is normally the case in a dynamically typed environment, but can lead to the same benefits in testing and code reusability.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In conclusion, Dependency Inversion is just as important to adhere to in a dynamically typed environment, and is very easy to achieve by utilizing Dependency Injection. It requires less code than in a statically typed environment, as is normally the case in a dynamically typed environment, but can lead to the same benefits in testing and code reusability.&lt;/span&gt;" SourceIndex="382;382" TextLen="356" order="44"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="  " DOMCldNum="17" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-44" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="4987" ObjectRectWidth="1200" SRC="&lt;p&gt; &lt;/p&gt;" SourceIndex="385" TextLen="1" order="45"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Topics Code Share Facebook Twitter LinkedIn " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-45" IsImg="false" LinkTextLen="4" ObjectRectHeight="156" ObjectRectLeft="0" ObjectRectTop="5030" ObjectRectWidth="1200" SRC="&lt;strong&gt;Topics&lt;/strong&gt;&lt;a href=&quot;https://www.zillow.com/engineering/tag/code/&quot; rel=&quot;tag&quot;&gt;Code&lt;/a&gt;&lt;strong&gt;Share&lt;/strong&gt;&lt;span class=&quot;hidden-xs&quot;&gt;Facebook&lt;/span&gt;&lt;span class=&quot;hidden-xs&quot;&gt;Twitter&lt;/span&gt;&lt;span class=&quot;hidden-xs&quot;&gt;LinkedIn&lt;/span&gt;" SourceIndex="391;394;400;410;422;434" TextLen="38" order="46"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-46" IsImg="false" LinkTextLen="0" ObjectRectHeight="369" ObjectRectLeft="0" ObjectRectTop="5220" ObjectRectWidth="1200" SourceIndex="450" TextLen="58" order="47">
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" Prev " DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-46-1" IsImg="false" LinkTextLen="0" ObjectRectHeight="326" ObjectRectLeft="0" ObjectRectTop="5220" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;media-object wp-post-image&quot; height=&quot;300&quot; src=&quot;https://wp.zillowstatic.com/23/Home-Project2-4e2578-300x300.png&quot; width=&quot;300&quot;/&gt;&lt;h4 class=&quot;media-heading&quot;&gt;Prev&lt;/h4&gt;" SourceIndex="1012;457" TextLen="4" order="48"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Addressing Housing Insecurity Through The Home Project " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-46-2" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="5563" ObjectRectWidth="1200" SRC="Addressing Housing Insecurity Through The Home Project" SourceIndex="0" TextLen="54" order="49"/>
</LayoutNode>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-47" IsImg="false" LinkTextLen="0" ObjectRectHeight="369" ObjectRectLeft="0" ObjectRectTop="5606" ObjectRectWidth="1200" SourceIndex="470" TextLen="43" order="50">
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Next " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-47-1" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="5606" ObjectRectWidth="1200" SRC="&lt;h4 class=&quot;media-heading&quot;&gt;Next&lt;/h4&gt;" SourceIndex="472" TextLen="4" order="51"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content="Debugging Production with Event Logging  " DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-47-2" IsImg="false" LinkTextLen="0" ObjectRectHeight="326" ObjectRectLeft="0" ObjectRectTop="5649" ObjectRectWidth="1200" SRC="Debugging Production with Event Logging&lt;img alt=&quot;&quot; class=&quot;media-object wp-post-image&quot; height=&quot;300&quot; src=&quot;https://wp.zillowstatic.com/23/logs-501475-300x300.jpeg&quot; width=&quot;300&quot;/&gt;" SourceIndex="0;1038" TextLen="39" order="52"/>
</LayoutNode>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Want to work at Zillow? View Openings Zillow.com Jobs Yahoo - Zillow Real Estate Network © 2006 - 2018 Zillow Follow Us Facebook Twitter LinkedIn " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-48" IsImg="false" LinkTextLen="50" ObjectRectHeight="284" ObjectRectLeft="0" ObjectRectTop="5992" ObjectRectWidth="1200" SRC="&lt;p&gt;Want to work at Zillow?&lt;/p&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;https://www.zillow.com/careers/jobs/&quot;&gt;View Openings&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/&quot;&gt;Zillow.com&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/careers/&quot;&gt;Jobs&lt;/a&gt;&lt;li&gt;Yahoo - Zillow Real Estate Network&lt;/li&gt;&lt;li&gt;© 2006 - 2018 Zillow&lt;/li&gt;&lt;li&gt;Follow Us&lt;/li&gt;&lt;a href=&quot;https://www.facebook.com/Zillow&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;&lt;a href=&quot;https://twitter.com/zillow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;a href=&quot;https://www.linkedin.com/company/zillow&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;" SourceIndex="497" TextLen="136" order="53"/>
</LayoutNode>
</VIPSPage>
