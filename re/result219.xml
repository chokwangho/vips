<VIPSPage PageRectHeight="600" PageRectLeft="0" PageRectTop="0" PageRectWidth="1200" PageTitle="Debugging Capybara Failures - Zillow Engineering" Url="https://www.zillow.com/engineering/debugging-capybara-failures/" WindowHeight="600" WindowWidth="1200" neworder="0" order="0">
<LayoutNode BgColor="#ffffff" ContainImg="6" ContainP="17" ContainTable="false" DOMCldNum="0" DoC="1" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1" IsImg="false" LinkTextLen="345" ObjectRectHeight="5717" ObjectRectLeft="0" ObjectRectTop="0" ObjectRectWidth="1200" SourceIndex="0" TextLen="8874" order="1">
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="☰ Zillow Engineering Infrastructure Mobile Performance and Testing Web Culture &amp; Events Jobs " DOMCldNum="0" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-1" IsImg="false" LinkTextLen="84" ObjectRectHeight="242" ObjectRectLeft="0" ObjectRectTop="0" ObjectRectWidth="1200" SRC="&lt;button aria-expanded=&quot;false&quot; class=&quot;navbar-toggle collapsed&quot; data-target=&quot;#header-navbar&quot; data-toggle=&quot;collapse&quot; type=&quot;button&quot;&gt;&#13;☰&#13;&lt;/button&gt;&lt;a class=&quot;navbar-title&quot; href=&quot;https://www.zillow.com/engineering/&quot;&gt;&#13;Zillow Engineering &lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/infrastructure/&quot;&gt;Infrastructure&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/mobile/&quot;&gt;Mobile&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/performance/&quot;&gt;Performance and Testing&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/web/&quot;&gt;Web&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/engineering/category/culture-events/&quot;&gt;Culture &amp;amp; Events&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/careers/&quot;&gt;Jobs&lt;/a&gt;" SourceIndex="0" TextLen="85" order="2"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Debugging Capybara Failures " DOMCldNum="15" DoC="10" FontSize="32" FontWeight="normal" FrameSourceIndex="0" ID="1-2" IsImg="false" LinkTextLen="0" ObjectRectHeight="50" ObjectRectLeft="0" ObjectRectTop="263" ObjectRectWidth="1200" SRC="&lt;h1 class=&quot;post-title&quot;&gt;&#13;Debugging Capybara Failures &lt;/h1&gt;" SourceIndex="188" TextLen="27" order="3"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content=" Posted by  Zachary Wright on May 25, 2018 in  Performance and Testing ,  Web " DOMCldNum="0" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-3" IsImg="false" LinkTextLen="40" ObjectRectHeight="82" ObjectRectLeft="0" ObjectRectTop="334" ObjectRectWidth="1200" SRC=" Posted by &lt;a href=&quot;https://www.zillow.com/engineering/author/zachwr/&quot; rel=&quot;author&quot; title=&quot;Posts by Zachary Wright&quot;&gt;Zachary Wright&lt;/a&gt;on May 25, 2018in &lt;a href=&quot;https://www.zillow.com/engineering/category/performance/&quot; rel=&quot;category tag&quot;&gt;Performance and Testing&lt;/a&gt;, &lt;a href=&quot;https://www.zillow.com/engineering/category/web/&quot; rel=&quot;category tag&quot;&gt;Web&lt;/a&gt;" SourceIndex="0;195;0;0;216;0;219" TextLen="71" order="4"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" " DOMCldNum="0" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-4" IsImg="true" LinkTextLen="0" ObjectRectHeight="350" ObjectRectLeft="0" ObjectRectTop="433" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;post-thumbnail wp-post-image&quot; height=&quot;350&quot; src=&quot;https://wp.zillowstatic.com/23/capybara-43be2d.jpg&quot; width=&quot;680&quot;/&gt;" SourceIndex="867" TextLen="0" order="5"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="A Wild Capybara in its Natural Habitat " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-5" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="801" ObjectRectWidth="1200" SRC="&lt;h2&gt;A Wild Capybara in its Natural Habitat&lt;/h2&gt;" SourceIndex="227" TextLen="38" order="6"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="At  NakedApartments  we use  capybara  to write our behavior driven, end-to-end integration tests, aka &quot;feature specs.&quot; Capybara is a powerful tool that sets on top of a web driver. It offers you, the developer, a DSL that is used to write actions that closely mimic how an actual user would interact with your website, actions like clicking links and submitting forms. All the while you assert that the content you expect to be visible on a given page is actually there. " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-6" IsImg="false" LinkTextLen="23" ObjectRectHeight="78" ObjectRectLeft="0" ObjectRectTop="857" ObjectRectWidth="1200" SRC="At &lt;a href=&quot;https://www.nakedapartments.com/&quot;&gt;NakedApartments&lt;/a&gt; we use &lt;a href=&quot;https://github.com/teamcapybara/capybara&quot;&gt;capybara&lt;/a&gt; to write our behavior driven, end-to-end integration tests, aka &quot;feature specs.&quot; Capybara is a powerful tool that sets on top of a web driver. It offers you, thedeveloper, a DSL that is used to write actions that closely mimic how an actual user would interact with your website, actions like clicking links and submitting forms. All the while you assert that thecontent you expect to be visible on a given page is actually there." SourceIndex="0;232;0;235;0;0;0" TextLen="465" order="7"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="In theory capybara is amazing, useful, and time saving. It catches embarrassing bugs before they can ever reach the sensitive eyes of your users. It allows you to say, with confidence, &quot;A user can login to my site and create a blog post.&quot; And for the most part this is true. It is amazing, useful, and time saving. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-7" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="952" ObjectRectWidth="1200" SRC="&lt;p&gt;In theory capybara is amazing, useful, and time saving. It catches embarrassing bugs before they can ever reach the sensitive eyes of your users. It allows you to say, with confidence, &quot;A user can log in to my site and create a blog post.&quot; And for the most part this is true. It is amazing, useful, and time saving.&lt;/p&gt;" SourceIndex="239" TextLen="314" order="8"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="However, anyone who has worked with capybara also knows that when things go wrong it can be very difficult to figure out why. A friend of mine, at the height of a feature spec fueled frustration,once described capybara as &quot;a Rube Goldberg machine of broken dreams.&quot; Failures can be random and silent, and since by their nature they involve your entire web stack you can never be quitesure if the problem is with your code, capybara, or something inside your architecture. (It's probably your code, I'm sorry to say.) " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-8" IsImg="false" LinkTextLen="0" ObjectRectHeight="78" ObjectRectLeft="0" ObjectRectTop="1021" ObjectRectWidth="1200" SRC="&lt;p&gt;However, anyone who has worked with capybara also knows that when things go wrong it can be very difficult to figure out why. A friend of mine, at the height of a feature spec fueled frustration, once described capybara as &quot;a Rube Goldberg machine of broken dreams.&quot; Failures can be random and silent, and since by their nature they involve your entire web stack you can never be quite sure if the problem is with your code, capybara, or something inside your architecture. (It's probably your code, I'm sorry to say.)&lt;/p&gt;" SourceIndex="242" TextLen="516" order="9"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="But even if it is your code, it can be hard to figure out what exactly is wrong with it, especially if capybara is being silent and not giving you much to go on. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-9" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="1116" ObjectRectWidth="1200" SRC="&lt;p&gt;But even if it is your code, it can be hard to figure out what exactly is wrong with it, especially if capybara is being silent and not giving you much to go on.&lt;/p&gt;" SourceIndex="245" TextLen="161" order="10"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Origin of the Silent Error " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-10" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="1160" ObjectRectWidth="1200" SRC="&lt;h2&gt;Origin of the Silent Error&lt;/h2&gt;" SourceIndex="248" TextLen="26" order="11"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="So what causes a silent capybara spec failure? I will preface this by saying the issue will only occur in tests that use a real browser driver, like selenium, chromedriver, or capybara-webkit. If you useRackTest, which is the default driver but doesn't support any javascript, the problem won't surface. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-11" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="1216" ObjectRectWidth="1200" SRC="&lt;p&gt;So what causes a silent capybara spec failure? I will preface this by saying the issue will only occur in tests that use a real browser driver, like selenium, chromedriver, or capybara-webkit. If you use RackTest, which is the default driver but doesn't support any javascript, the problem won't surface.&lt;/p&gt;" SourceIndex="251" TextLen="303" order="12"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Now, lets look at an example of what what we mean by &quot;silent.&quot; " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-12" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="1285" ObjectRectWidth="1200" SRC="&lt;p&gt;Now, lets look at an example of what what we mean by &quot;silent.&quot;&lt;/p&gt;" SourceIndex="254" TextLen="62" order="13"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Let's say you have a view template that looks like this: " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-13" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="1328" ObjectRectWidth="1200" SRC="&lt;p&gt;Let's say you have a view template that looks like this:&lt;/p&gt;" SourceIndex="257" TextLen="56" order="14"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="&lt;h1&gt;Manhattan&lt;/h1&gt;&lt;% ['Greenwich Village ', 'Upper East Side'].each do |neighborhood| %&gt;    &lt;%= neighborhood.name %&gt; " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-14" IsImg="false" LinkTextLen="0" ObjectRectHeight="112" ObjectRectLeft="0" ObjectRectTop="1371" ObjectRectWidth="1200" SRC="&lt;pre&gt;&#13;&amp;lt;h1&amp;gt;Manhattan&amp;lt;/h1&amp;gt;&#13;&amp;lt;% ['Greenwich Village ', 'Upper East Side'].each do |neighborhood| %&amp;gt;&#13;    &amp;lt;%= neighborhood.name %&amp;gt;&#13;&lt;/pre&gt;" SourceIndex="260" TextLen="116" order="15"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="And a capybara spec that looks like this: " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-15" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="1500" ObjectRectWidth="1200" SRC="&lt;p&gt;And a capybara spec that looks like this:&lt;/p&gt;" SourceIndex="263" TextLen="41" order="16"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="require 'spec_helper'feature 'Manhattan', js: true do  before do    visit manhattan_path  end  it 'Contains header' do    expect(page).to have_content('Manhattan')  endend " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-16" IsImg="false" LinkTextLen="0" ObjectRectHeight="308" ObjectRectLeft="0" ObjectRectTop="1543" ObjectRectWidth="1200" SRC="&lt;pre&gt;require 'spec_helper'&#13;&#13;feature 'Manhattan', js: true do&#13;  before do&#13;    visit manhattan_path&#13;  end&#13;&#13;  it 'Contains header' do&#13;    expect(page).to have_content('Manhattan')&#13;  end&#13;end&lt;/pre&gt;" SourceIndex="266" TextLen="171" order="17"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="If you run this spec, it will fail and capybara will output the following: " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-17" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="1868" ObjectRectWidth="1200" SRC="&lt;p&gt;If you run this spec, it will fail and capybara will output the following:&lt;/p&gt;" SourceIndex="269" TextLen="74" order="18"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="expected to find text &quot;Manhattan&quot; in &quot;&quot; " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-18" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="1911" ObjectRectWidth="1200" SRC="&lt;pre&gt;expected to find text &quot;Manhattan&quot; in &quot;&quot;&lt;/pre&gt;" SourceIndex="272" TextLen="39" order="19"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="That is incredibly unhelpful. If we return to our view code, we can quickly spot the real issue: our  each  block is missing a closing  end . " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-19" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="1956" ObjectRectWidth="1200" SRC="That is incredibly unhelpful. If we return to our view code, we can quickly spot the real issue: our &lt;code&gt;each&lt;/code&gt; block is missing a closing &lt;code&gt;end&lt;/code&gt;." SourceIndex="0;277;0;280;0" TextLen="137" order="20"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="In the real world this would raise a  SyntaxError . Why here do we instead get a vague failure telling us that our view rendered an empty string, with no details as to where or why? " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-20" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="2001" ObjectRectWidth="1200" SRC="In the real world this would raise a &lt;code&gt;SyntaxError&lt;/code&gt;. Why here do we instead get a vague failure telling us that our view rendered an empty string, with no details as to where or why?" SourceIndex="0;286;0" TextLen="179" order="21"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Capybara's Exception Handling " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-21" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="2047" ObjectRectWidth="1200" SRC="&lt;h2&gt;Capybara's Exception Handling&lt;/h2&gt;" SourceIndex="290" TextLen="29" order="22"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="The answer lies in how capybara attempts to bubble exceptions up from the thread that the browser is running in to the current test runner thread. This is why the silent exception issue only occurswhen using a driver like selenium, where the browser and test runner are in separate threads; when using RackTest as the driver, both run in the same thread and therefore it's easy for capybara topropagate exceptions. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-22" IsImg="false" LinkTextLen="0" ObjectRectHeight="78" ObjectRectLeft="0" ObjectRectTop="2103" ObjectRectWidth="1200" SRC="&lt;p&gt;The answer lies in how capybara attempts to bubble exceptions up from the thread that the browser is running in to the current test runner thread. This is why the silent exception issue only occurs when using a driver like selenium, where the browser and test runner are in separate threads; when using RackTest as the driver, both run in the same thread and therefore it's easy for capybara to propagate exceptions.&lt;/p&gt;" SourceIndex="293" TextLen="414" order="23"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="When the two are separated capybara has to find a way to save the error messages that occur in the browser thread, then display them back in the test runner thread. It does this by  wrapping the application in a bit of middleware that records the exception . " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-23" IsImg="false" LinkTextLen="73" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="2198" ObjectRectWidth="1200" SRC="When the two are separated capybara has to find a way to save the error messages that occur in the browser thread, then display them back in the test runner thread. It does this by &lt;a href=&quot;https://github.com/teamcapybara/capybara/commit/6f145fb069da7e052378b76491cae074c28afc28&quot;&gt;wrapping the application in a bit of middleware that records the exception&lt;/a&gt;&lt;a href=&quot;https://github.com/teamcapybara/capybara/commit/6f145fb069da7e052378b76491cae074c28afc28&quot;&gt;wrapping the application in a bit of middleware that records the exception&lt;/a&gt;." SourceIndex="0;298;298;0" TextLen="255" order="24"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="In most cases this works great, but as we have seen there is an exception to the exception, and the answer is on line 18 of  lib/capybara/server.rb , in the above linked Github commit: " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-24" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="2267" ObjectRectWidth="1200" SRC="In most cases this works great, but as we have seen there is an exception to the exception, and the answer is on line 18 of &lt;code&gt;lib/capybara/server.rb&lt;/code&gt;, in the above linked Github commit:" SourceIndex="0;304;0" TextLen="182" order="25"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="rescue StandardError =&gt; e  @error = e unless @error  raise eend " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-25" IsImg="false" LinkTextLen="0" ObjectRectHeight="140" ObjectRectLeft="0" ObjectRectTop="2312" ObjectRectWidth="1200" SRC="&lt;pre&gt;&#13;rescue StandardError =&amp;gt; e&#13;  @error = e unless @error&#13;  raise e&#13;end&#13;&lt;/pre&gt;" SourceIndex="308" TextLen="63" order="26"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Capybara only attempts to catch and reraise errors that inherit from  StandardError .  SyntaxError , on the other hand, inherits from  Exception . This is a best practice in Ruby-world, the capybara devs haven't done anything wrong.  StandardError  exceptions are a subset of all exceptions in Ruby, and the default behavior of  rescue  is actually to only catch  StandardError 's: " DOMCldNum="13" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-26" IsImg="false" LinkTextLen="0" ObjectRectHeight="56" ObjectRectLeft="0" ObjectRectTop="2469" ObjectRectWidth="1200" SRC="Capybara only attempts to catch and reraise errors that inherit from &lt;code&gt;StandardError&lt;/code&gt;. &lt;code&gt;SyntaxError&lt;/code&gt;, on the other hand, inherits from &lt;code&gt;Exception&lt;/code&gt;. This is a best practice in Ruby-world, thecapybara devs haven't done anything wrong. &lt;code&gt;StandardError&lt;/code&gt; exceptions are a subset of all exceptions in Ruby, and the default behavior of &lt;code&gt;rescue&lt;/code&gt; is actually to only catch &lt;code&gt;StandardError&lt;/code&gt;'s:" SourceIndex="0;313;0;316;0;319;0;0;322;0;325;0;328;0" TextLen="368" order="27"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="rescue  puts 'This will only catch StandardError'end " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-27" IsImg="false" LinkTextLen="0" ObjectRectHeight="112" ObjectRectLeft="0" ObjectRectTop="2542" ObjectRectWidth="1200" SRC="&lt;pre&gt;&#13;rescue&#13;  puts 'This will only catch StandardError'&#13;end&#13;&lt;/pre&gt;" SourceIndex="332" TextLen="52" order="28"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Using  rescue Exception =&gt; e  would actually expand the type of exceptions caught, including things like  Interrupt , which is raised when you hit  ctrl+c  to kill an application. Other common types of  Exception  include  NoMemoryError  and, of course,  SyntaxError , which is the one that bit us here. " DOMCldNum="13" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-28" IsImg="false" LinkTextLen="0" ObjectRectHeight="56" ObjectRectLeft="0" ObjectRectTop="2671" ObjectRectWidth="1200" SRC="Using &lt;code&gt;rescue Exception =&amp;gt; e&lt;/code&gt; would actually expand the type of exceptions caught, including things like &lt;code&gt;Interrupt&lt;/code&gt;, which is raised when you hit &lt;code&gt;ctrl+c&lt;/code&gt; to kill an application. Other commontypes of &lt;code&gt;Exception&lt;/code&gt; include &lt;code&gt;NoMemoryError&lt;/code&gt; and, of course, &lt;code&gt;SyntaxError&lt;/code&gt;, which is the one that bit us here." SourceIndex="0;337;0;340;0;343;0;0;346;0;349;0;352;0" TextLen="290" order="29"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Workaround " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-29" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="2745" ObjectRectWidth="1200" SRC="&lt;h2&gt;Workaround&lt;/h2&gt;" SourceIndex="356" TextLen="10" order="30"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="So what can we do to make these kinds of exceptions easier to debug? " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-30" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="2801" ObjectRectWidth="1200" SRC="&lt;p&gt;So what can we do to make these kinds of exceptions easier to debug?&lt;/p&gt;" SourceIndex="359" TextLen="68" order="31"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="The answer, I believe, is in how exceptions are handled when Rails runs in a  development  environment. In this case, exceptions that occur when rendering or fetching a view don't &quot;bubble up,&quot; but are instead their stack trace is rendered in HTML in an easy to read format to help the developer debug the issue. " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-31" IsImg="false" LinkTextLen="0" ObjectRectHeight="54" ObjectRectLeft="0" ObjectRectTop="2844" ObjectRectWidth="1200" SRC="The answer, I believe, is in how exceptions are handled when Rails runs in a &lt;code&gt;development&lt;/code&gt; environment. In this case, exceptions that occur when rendering or fetching a view don't &quot;bubble up,&quot; butare instead their stack trace is rendered in HTML in an easy to read format to help the developer debug the issue." SourceIndex="0;364;0;0" TextLen="308" order="32"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="We can turn this behavior on in our test environment, so that instead of reraising exceptions, they will be rendered to the view. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-32" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="2915" ObjectRectWidth="1200" SRC="&lt;p&gt;We can turn this behavior on in our test environment, so that instead of reraising exceptions, they will be rendered to the view.&lt;/p&gt;" SourceIndex="368" TextLen="129" order="33"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="In  config/environment/test.rb , we change this value from false to true: " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-33" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="2958" ObjectRectWidth="1200" SRC="In &lt;code&gt;config/environment/test.rb&lt;/code&gt;, we change this value from false to true:" SourceIndex="0;373;0" TextLen="71" order="34"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="config.action_dispatch.show_exceptions = true " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-34" IsImg="false" LinkTextLen="0" ObjectRectHeight="56" ObjectRectLeft="0" ObjectRectTop="3003" ObjectRectWidth="1200" SRC="&lt;pre&gt;&#13;config.action_dispatch.show_exceptions = true&#13;&lt;/pre&gt;" SourceIndex="377" TextLen="45" order="35"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Now exceptions will be rendered instead of being raised. Our spec will still fail since the real view won't be rendered, but instead of complaining that our content doesn't exist within an empty string,capybara will display the full stack trace of the exception. However, there are two drawbacks to this approach: " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-35" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="3076" ObjectRectWidth="1200" SRC="&lt;p&gt;Now exceptions will be rendered instead of being raised. Our spec will still fail since the real view won't be rendered, but instead of complaining that our content doesn't exist within an empty string, capybara will display the full stack trace of the exception. However, there are two drawbacks to this approach:&lt;/p&gt;" SourceIndex="380" TextLen="313" order="36"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="The exceptions are difficult to read when they are printed out in our test runner. This also impacts request specs, which aren't ran via capybara and don't involve a browser at all. We'd rather exceptions continue to be raised here. " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-36" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="3145" ObjectRectWidth="1200" SRC="&lt;li&gt;The exceptions are difficult to read when they are printed out in our test runner.&lt;/li&gt;&lt;li&gt;This also impacts request specs, which aren't ran via capybara and don't involve a browser at all. We'd rather exceptions continue to be raised here.&lt;/li&gt;" SourceIndex="385;388" TextLen="231" order="37"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Fortunately, there are workarounds to these drawbacks, too. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-37" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3214" ObjectRectWidth="1200" SRC="&lt;p&gt;Fortunately, there are workarounds to these drawbacks, too.&lt;/p&gt;" SourceIndex="392" TextLen="59" order="38"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Screenshots " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-38" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="3258" ObjectRectWidth="1200" SRC="&lt;h2&gt;Screenshots&lt;/h2&gt;" SourceIndex="395" TextLen="11" order="39"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="capybara-screenshot  is a Ruby gem that takes a screenshot of the current page whenever a capybara spec fails. This is extremely useful even if you aren't trying to debug a silent exception, but in our case, where we are rendering the exceptions to the view instead of raising them, it is almost essential. We need a user friendly way to read and parse these exceptions when they happen. " DOMCldNum="2" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-39" IsImg="false" LinkTextLen="19" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="3314" ObjectRectWidth="1200" SRC="&lt;a href=&quot;https://github.com/mattheworiordan/capybara-screenshot&quot;&gt;capybara-screenshot&lt;/a&gt; is a Ruby gem that takes a screenshot of the current page whenever a capybara spec fails. This is extremely useful even if you aren't trying to debug a silent exception, but in ourcase, where we are rendering the exceptions to the view instead of raising them, it is almost essential. We need a user friendly way to read and parse these exceptions when they happen." SourceIndex="399;0;0" TextLen="385" order="40"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="However, lets assume that our failing spec only happens randomly, or only seems to happen during our continuous integration (CI) builds. How do we view our screenshots in that case? At NakedApartments we use  Codeship Pro  as our CI solution, which uses  Docker  containers to run our tests. By their nature containers are ephemeral, so there's no place for us to store artifacts, like screenshots, generated by the build. " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-40" IsImg="false" LinkTextLen="18" ObjectRectHeight="78" ObjectRectLeft="0" ObjectRectTop="3383" ObjectRectWidth="1200" SRC="However, lets assume that our failing spec only happens randomly, or only seems to happen during our continuous integration (CI) builds. How do we view our screenshots in that case? AtNakedApartments we use &lt;a href=&quot;https://codeship.com/features/pro&quot;&gt;Codeship Pro&lt;/a&gt; as our CI solution, which uses &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; containers to run our tests. By their nature containers are ephemeral, so there's no place for us to store artifacts, likescreenshots, generated by the build." SourceIndex="0;0;405;0;408;0;0" TextLen="416" order="41"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Thankfully, capybara-screenshot includes a  feature  that allows you to upload your screenshots to an  Amazon S3  bucket. " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-41" IsImg="false" LinkTextLen="16" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3478" ObjectRectWidth="1200" SRC="Thankfully, capybara-screenshot includes a &lt;a href=&quot;https://github.com/mattheworiordan/capybara-screenshot#uploading-screenshots-to-s3&quot;&gt;feature&lt;/a&gt; that allows you to upload your screenshots to an &lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;Amazon S3&lt;/a&gt; bucket." SourceIndex="0;414;0;417;0" TextLen="117" order="42"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="We can create a Rails initializer that configures this, and only performs the uploads during test runs on our Codeship builds ( CI_BUILD_ID  is set automatically by Codeship): " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-42" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="3521" ObjectRectWidth="1200" SRC="We can create a Rails initializer that configures this, and only performs the uploads during test runs on our Codeship builds (&lt;code&gt;CI_BUILD_ID&lt;/code&gt; is set automatically by Codeship):" SourceIndex="0;423;0" TextLen="173" order="43"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="if Rails.env.test? &amp;&amp; ENV['CI_BUILD_ID'].present?  Capybara::Screenshot.s3_configuration = {    s3_client_credentials: {      access_key_id: ENV['AWS_ACCESS_KEY_ID'],      secret_access_key: ENV['AWS_SECRET_ACCESS_KEY']    },    bucket_name: 'screenshots'  }end " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-43" IsImg="false" LinkTextLen="0" ObjectRectHeight="280" ObjectRectLeft="0" ObjectRectTop="3566" ObjectRectWidth="1200" SRC="&lt;pre&gt;&#13;if Rails.env.test? &amp;amp;&amp;amp; ENV['CI_BUILD_ID'].present?&#13;  Capybara::Screenshot.s3_configuration = {&#13;    s3_client_credentials: {&#13;      access_key_id: ENV['AWS_ACCESS_KEY_ID'],&#13;      secret_access_key: ENV['AWS_SECRET_ACCESS_KEY']&#13;    },&#13;    bucket_name: 'screenshots'&#13;  }&#13;end&#13;&lt;/pre&gt;" SourceIndex="427" TextLen="261" order="44"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Now whenever a feature spec fails in our CI build, we can download the screenshot from S3 and examine the error. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-44" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="3863" ObjectRectWidth="1200" SRC="&lt;p&gt;Now whenever a feature spec fails in our CI build, we can download the screenshot from S3 and examine the error.&lt;/p&gt;" SourceIndex="430" TextLen="112" order="45"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Configurable Exceptions " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-45" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="3907" ObjectRectWidth="1200" SRC="&lt;h2&gt;Configurable Exceptions&lt;/h2&gt;" SourceIndex="433" TextLen="23" order="46"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="ConfigurableExceptions  is another Ruby gem that allows us to toggle the  show_exceptions  value programmatically, at run time, during our test execution. " DOMCldNum="4" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-46" IsImg="false" LinkTextLen="22" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="3963" ObjectRectWidth="1200" SRC="&lt;a href=&quot;https://github.com/balvig/configurable_exceptions&quot;&gt;ConfigurableExceptions&lt;/a&gt; is another Ruby gem that allows us to toggle the &lt;code&gt;show_exceptions&lt;/code&gt; value programmatically, at run time, during our test execution." SourceIndex="437;0;440;0" TextLen="151" order="47"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="We simply add the following to our  spec_helper.rb  file, so that exceptions will render for feature specs but not for request specs: " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-47" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="4008" ObjectRectWidth="1200" SRC="We simply add the following to our &lt;code&gt;spec_helper.rb&lt;/code&gt; file, so that exceptions will render for feature specs but not for request specs:" SourceIndex="0;446;0" TextLen="131" order="48"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="config.around(:example, type: :feature) do |example|  ConfigurableExceptions.show_exceptions = true  example.run  ConfigurableExceptions.show_exceptions = falseend " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-48" IsImg="false" LinkTextLen="0" ObjectRectHeight="168" ObjectRectLeft="0" ObjectRectTop="4053" ObjectRectWidth="1200" SRC="&lt;pre&gt;&#13;config.around(:example, type: :feature) do |example|&#13;  ConfigurableExceptions.show_exceptions = true&#13;  example.run&#13;  ConfigurableExceptions.show_exceptions = false&#13;end&#13;&lt;/pre&gt;" SourceIndex="450" TextLen="163" order="49"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="With this in place we should leave the value of  show_exceptions  in our  test.rb  config file at its default value of  false . " DOMCldNum="7" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-49" IsImg="false" LinkTextLen="0" ObjectRectHeight="28" ObjectRectLeft="0" ObjectRectTop="4238" ObjectRectWidth="1200" SRC="With this in place we should leave the value of &lt;code&gt;show_exceptions&lt;/code&gt; in our &lt;code&gt;test.rb&lt;/code&gt; config file at its default value of &lt;code&gt;false&lt;/code&gt;." SourceIndex="0;455;0;458;0;461;0" TextLen="121" order="50"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Conclusion " DOMCldNum="15" DoC="10" FontSize="24" FontWeight="normal" FrameSourceIndex="0" ID="1-50" IsImg="false" LinkTextLen="0" ObjectRectHeight="38" ObjectRectLeft="0" ObjectRectTop="4284" ObjectRectWidth="1200" SRC="&lt;h2&gt;Conclusion&lt;/h2&gt;" SourceIndex="465" TextLen="10" order="51"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Now we are all set to quickly debug previously silent exceptions, using a combination of rendered stacktraces and screenshots! " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-51" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="4340" ObjectRectWidth="1200" SRC="&lt;p&gt;Now we are all set to quickly debug previously silent exceptions, using a combination of rendered stacktraces and screenshots!&lt;/p&gt;" SourceIndex="468" TextLen="126" order="52"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="There is one final gotcha to this approach to watch out for: since we are rendering exceptions to the view, we expect our specs to fail since they won't be able to match a  have_content , or another matcher, with the rendered stack trace. If the content you are matching on appears somewhere in the stack trace, your test would pass even though it should fail. " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-52" IsImg="false" LinkTextLen="0" ObjectRectHeight="54" ObjectRectLeft="0" ObjectRectTop="4383" ObjectRectWidth="1200" SRC="There is one final gotcha to this approach to watch out for: since we are rendering exceptions to the view, we expect our specs to fail since they won't be able to match a &lt;code&gt;have_content&lt;/code&gt;, or anothermatcher, with the rendered stack trace. If the content you are matching on appears somewhere in the stack trace, your test would pass even though it should fail." SourceIndex="0;473;0;0" TextLen="357" order="53"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Therefore it is important to be specific about what you are matching on, and not to use short, generic phrases. This is a best practice when writing feature specs regardless, but its important toremember that a passing spec that should fail is even worse than a failing spec that's hard to debug. " DOMCldNum="15" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-53" IsImg="false" LinkTextLen="0" ObjectRectHeight="52" ObjectRectLeft="0" ObjectRectTop="4454" ObjectRectWidth="1200" SRC="&lt;p&gt;Therefore it is important to be specific about what you are matching on, and not to use short, generic phrases. This is a best practice when writing feature specs regardless, but its important to remember that a passing spec that should fail is even worse than a failing spec that's hard to debug.&lt;/p&gt;" SourceIndex="477" TextLen="296" order="54"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Share Facebook Twitter LinkedIn " DOMCldNum="1" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-54" IsImg="false" LinkTextLen="0" ObjectRectHeight="104" ObjectRectLeft="0" ObjectRectTop="4523" ObjectRectWidth="1200" SRC="&lt;strong&gt;Share&lt;/strong&gt;&lt;span class=&quot;hidden-xs&quot;&gt;Facebook&lt;/span&gt;&lt;span class=&quot;hidden-xs&quot;&gt;Twitter&lt;/span&gt;&lt;span class=&quot;hidden-xs&quot;&gt;LinkedIn&lt;/span&gt;" SourceIndex="484;494;506;518" TextLen="28" order="55"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-55" IsImg="false" LinkTextLen="0" ObjectRectHeight="369" ObjectRectLeft="0" ObjectRectTop="4661" ObjectRectWidth="1200" SourceIndex="534" TextLen="43" order="56">
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content=" Prev " DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-55-1" IsImg="false" LinkTextLen="0" ObjectRectHeight="326" ObjectRectLeft="0" ObjectRectTop="4661" ObjectRectWidth="1200" SRC="&lt;img alt=&quot;&quot; class=&quot;media-object wp-post-image&quot; height=&quot;300&quot; src=&quot;https://wp.zillowstatic.com/23/logs-501475-300x300.jpeg&quot; width=&quot;300&quot;/&gt;&lt;h4 class=&quot;media-heading&quot;&gt;Prev&lt;/h4&gt;" SourceIndex="1180;541" TextLen="4" order="57"/>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Debugging Production with Event Logging " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-55-2" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="5004" ObjectRectWidth="1200" SRC="Debugging Production with Event Logging" SourceIndex="0" TextLen="39" order="58"/>
</LayoutNode>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-56" IsImg="false" LinkTextLen="0" ObjectRectHeight="369" ObjectRectLeft="0" ObjectRectTop="5047" ObjectRectWidth="1200" SourceIndex="554" TextLen="46" order="59">
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="0" ContainTable="false" Content="Next " DOMCldNum="3" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-56-1" IsImg="false" LinkTextLen="0" ObjectRectHeight="26" ObjectRectLeft="0" ObjectRectTop="5047" ObjectRectWidth="1200" SRC="&lt;h4 class=&quot;media-heading&quot;&gt;Next&lt;/h4&gt;" SourceIndex="556" TextLen="4" order="60"/>
<LayoutNode BgColor="#ffffff" ContainImg="2" ContainP="0" ContainTable="false" Content="Behind Zillow 3D Home - Backend Algorithms  " DOMCldNum="3" DoC="8" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-56-2" IsImg="false" LinkTextLen="0" ObjectRectHeight="326" ObjectRectLeft="0" ObjectRectTop="5090" ObjectRectWidth="1200" SRC="Behind Zillow 3D Home - Backend Algorithms&lt;img alt=&quot;&quot; class=&quot;media-object wp-post-image&quot; height=&quot;300&quot; src=&quot;https://wp.zillowstatic.com/23/Screen-Shot-2018-06-19-at-11.33.27-AM-2ab8a2-300x300.png&quot; width=&quot;300&quot;/&gt;" SourceIndex="0;1206" TextLen="42" order="61"/>
</LayoutNode>
<LayoutNode BgColor="#ffffff" ContainImg="0" ContainP="1" ContainTable="false" Content="Want to work at Zillow? View Openings Zillow.com Jobs Yahoo - Zillow Real Estate Network © 2006 - 2018 Zillow Follow Us Facebook Twitter LinkedIn " DOMCldNum="5" DoC="10" FontSize="16" FontWeight="normal" FrameSourceIndex="0" ID="1-57" IsImg="false" LinkTextLen="50" ObjectRectHeight="284" ObjectRectLeft="0" ObjectRectTop="5433" ObjectRectWidth="1200" SRC="&lt;p&gt;Want to work at Zillow?&lt;/p&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;https://www.zillow.com/careers/jobs/&quot;&gt;View Openings&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/&quot;&gt;Zillow.com&lt;/a&gt;&lt;a href=&quot;https://www.zillow.com/careers/&quot;&gt;Jobs&lt;/a&gt;&lt;li&gt;Yahoo - Zillow Real Estate Network&lt;/li&gt;&lt;li&gt;© 2006 - 2018 Zillow&lt;/li&gt;&lt;li&gt;Follow Us&lt;/li&gt;&lt;a href=&quot;https://www.facebook.com/Zillow&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;&lt;a href=&quot;https://twitter.com/zillow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;a href=&quot;https://www.linkedin.com/company/zillow&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt;" SourceIndex="581" TextLen="136" order="62"/>
</LayoutNode>
</VIPSPage>
